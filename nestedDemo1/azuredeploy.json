{
  //"$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {


    // -------------------------------------------------------------------
    //Subscription&ResourceGroups


    "vnetResourceGroup": {
      "type": "string",
      "defaultValue": "Resource Group Of Existing VNet",
      "metadata": {
        "description": "ResourceGroup where the VNet is"
      }
    },

    "vnetSubscriptionId": {
      "type": "string",
      "defaultValue": "Subscription Id Of Existing VNet",
      "metadata": {
        "description": "Subscription where the VNet is"
      }
    },

    "vmResourceGroup": {
      "type": "string",
      "defaultValue": "Resource Group To Deploy VM",
      "metadata": {
        "description": "ResourceGroup where the VM should be deployed"
      }
    },

    "vmSubscriptionId": {
      "type": "string",
      "defaultValue": "Subscription Id To Deploy VM",
      "metadata": {
        "description": "Subscription Id of where the VM should be deployed"
      }
    },


    "storageAccountResourceGroup": {
      "type": "string",
      "defaultValue": "Resource Group To Deploy Storage Account",
      "metadata": {
        "description": "ResourceGroup where the Storage Account should be deployed"
      }
    },

    "storageAccountSubscriptionId": {
      "type": "string",
      "defaultValue": "Subscription Id To Deploy Storage Account",
      "metadata": {
        "description": "Subscription Id where the Storage Account should be deployed"
      }
    },

    "nicResourceGroup": {
      "type": "string",
      "defaultValue": "Resource Group To Deploy NIC",
      "metadata": {
        "description": "Resource Group where the NIC is deployed"
      }
    },

    "nicSubscriptionId": {
      "type": "string",
      "defaultValue": "Subscription Id To Deploy NIC",
      "metadata": {
        "description": "Subscription Id where the NIC should be deployed"
      }
    },

    "sqlResourceGroup": {
      "type": "string",
      "defaultValue": "Resource Group To Deploy VM",
      "metadata": {
        "description": "ResourceGroup where the VM should be deployed"
      }
    },

    "sqlSubscriptionId": {
      "type": "string",
      "defaultValue": "Subscription Id To Deploy VM",
      "metadata": {
        "description": "Subscription Id of where the VM should be deployed"
      }
    },

    // -------------------------------------------------------------------




    // -------------------------------------------------------------------
    //VNet&Subnet Params


    "existingVnetName": {
      "type": "string",
      "defaultValue": "Name Of Existing VNet",
      "metadata": {
        "description": "Subscription where the VNet is"
      }
    },

    "newSubnetName": {
      "type": "string",
      "defaultValue": "Name For New Subnet",
      "metadata": {
        "description": ""
      }
    },

    "subnet1Prefix": {
      "type": "string",
      "defaultValue": "Prefix For New Subnet",
      "metadata": {
        "description": "10.0.1.0/24"
      }
    },

    // -------------------------------------------------------------------
    //NIC Params

    "vmNicName": {
      "type": "string",
      "defaultValue": "Name Of New VM NIC",
      "metadata": {
        "description": ""
      }
    },

    // -------------------------------------------------------------------
    //StorageAccount Params

    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_ZRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": ""
      }
    },


    "storageAccountName": {
      "type": "string",
      "defaultValue": "Name For Diagnostic Storage Account",
      "metadata": {
        "description": ""
      }
    },

    // -------------------------------------------------------------------
    //VM Params

    "virtualMachineName": {
      "type": "string",
      "defaultValue": "Name For Virtual Machine",
      "metadata": {
        "description": "Name of the Virtual Machine"
      }
    },

    "virtualMachineSku": {
      "allowedValues": [
        "2008-R2-SP1",
        "2012-Datacenter",
        "2012-R2-Datacenter",
        "2016-Datacenter",
        "2019-Datacenter"
      ],
      "defaultValue": "2016-Datacenter",
      "type": "String",
      "metadata": {
        "description": "Specifies the Windows Version to use as the base image."
      }
    },

    "VMSize": {
      "type": "string",
      "allowedValues": [
        "Basic_A0",
        "Basic_A1",
        "Basic_A2",
        "Basic_A3",
        "Basic_A4",
        "Standard_A0",
        "Standard_A1",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A9",
        "Standard_A10",
        "Standard_A11",
        "Standard_A1_v2",
        "Standard_A2_v2",
        "Standard_A4_v2",
        "Standard_A8_v2",
        "Standard_A2m_v2",
        "Standard_A4m_v2",
        "Standard_A8m_v2",
        "Standard_B1s",
        "Standard_B1ms",
        "Standard_B2s",
        "Standard_B2ms",
        "Standard_B4ms",
        "Standard_B8ms",
        "Standard_D1",
        "Standard_D2",
        "Standard_D3",
        "Standard_D4",
        "Standard_D11",
        "Standard_D12",
        "Standard_D13",
        "Standard_D14",
        "Standard_D1_v2",
        "Standard_D2_v2",
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_D2_v3",
        "Standard_D4_v3",
        "Standard_D8_v3",
        "Standard_D16_v3",
        "Standard_D32_v3",
        "Standard_D64_v3",
        "Standard_D2s_v3",
        "Standard_D4s_v3",
        "Standard_D8s_v3",
        "Standard_D16s_v3",
        "Standard_D32s_v3",
        "Standard_D64s_v3",
        "Standard_D11_v2",
        "Standard_D12_v2",
        "Standard_D13_v2",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_DS1",
        "Standard_DS2",
        "Standard_DS3",
        "Standard_DS4",
        "Standard_DS11",
        "Standard_DS12",
        "Standard_DS13",
        "Standard_DS14",
        "Standard_DS1_v2",
        "Standard_DS2_v2",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_DS11_v2",
        "Standard_DS12_v2",
        "Standard_DS13_v2",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_DS13-4_v2",
        "Standard_DS13-2_v2",
        "Standard_DS14-8_v2",
        "Standard_DS14-4_v2",
        "Standard_E2_v3",
        "Standard_E4_v3",
        "Standard_E8_v3",
        "Standard_E16_v3",
        "Standard_E32_v3",
        "Standard_E64_v3",
        "Standard_E2s_v3",
        "Standard_E4s_v3",
        "Standard_E8s_v3",
        "Standard_E16s_v3",
        "Standard_E32s_v3",
        "Standard_E64s_v3",
        "Standard_E32-16_v3",
        "Standard_E32-8s_v3",
        "Standard_E64-32s_v3",
        "Standard_E64-16s_v3",
        "Standard_F1",
        "Standard_F2",
        "Standard_F4",
        "Standard_F8",
        "Standard_F16",
        "Standard_F1s",
        "Standard_F2s",
        "Standard_F4s",
        "Standard_F8s",
        "Standard_F16s",
        "Standard_F2s_v2",
        "Standard_F4s_v2",
        "Standard_F8s_v2",
        "Standard_F16s_v2",
        "Standard_F32s_v2",
        "Standard_F64s_v2",
        "Standard_F72s_v2",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5",
        "Standard_GS4-8",
        "Standard_GS4-4",
        "Standard_GS5-16",
        "Standard_GS5-8",
        "Standard_H8",
        "Standard_H16",
        "Standard_H8m",
        "Standard_H16m",
        "Standard_H16r",
        "Standard_H16mr",
        "Standard_L4s",
        "Standard_L8s",
        "Standard_L16s",
        "Standard_L32s",
        "Standard_M64s",
        "Standard_M64ms",
        "Standard_M128s",
        "Standard_M128ms",
        "Standard_M64-32ms",
        "Standard_M64-16ms",
        "Standard_M128-64ms",
        "Standard_M128-32ms",
        "Standard_NC6",
        "Standard_NC12",
        "Standard_NC24",
        "Standard_NC24r",
        "Standard_NC6s_v2",
        "Standard_NC12s_v2",
        "Standard_NC24s_v2",
        "Standard_NC24rs_v2",
        "Standard_NC6s_v3",
        "Standard_NC12s_v3",
        "Standard_NC24s_v3",
        "Standard_NC24rs_v3",
        "Standard_ND6s",
        "Standard_ND12s",
        "Standard_ND24s",
        "Standard_ND24rs",
        "Standard_NV6",
        "Standard_NV12",
        "Standard_NV24"
      ],
      "defaultValue": "Standard_DS2_v2",
      "metadata": {
        "description": "Specifies the size of the virtual machine(s)."
      }
    },

    "dataDiskSize": {
      "type": "string",
      "allowedValues": [
        "32",
        "64",
        "128",
        "256",
        "512",
        "1024"
      ],
      "defaultValue": "128",
      "metadata": {
        "description": "Specifies the size of the data disk in GB."
      },
      "minLength": 1
    },

    "localAdminUsername": {
      "type": "String",
      "allowedValues": [
        "svadmin",
        "sysadmin"
      ],
      "defaultValue": "sysadmin",
      "metadata": {
        "description": "Specifies the username for the local administrator account. This should be svadmin."
      }
    },

    "localAdminPassword": {
      "minLength": 6,
      "maxLength": 123,
      "type": "String",
      "metadata": {
        "description": "Specifies the password for the local administrator account."
      }
    },


    // -------------------------------------------------------------------
    "resourceLocation": {
      "type": "string",
      "defaultValue": "** CHANGE ME **",
      "metadata": {
        "description": ""
      }
    },

    // -------------------------------------------------------------------
    //SQLServer Params

    "sqlName": {
      "type": "String",
      "metadata": {
        "description": "Specifies the password for the local administrator account."
      }
    }




  },

  "variables": {

    "VNetID": "[resourceId(Parameters('vnetResourceGroup'), 'Microsoft.Network/virtualNetworks', Parameters('existingVnetName'))]",

    "VMSubnetRef": "[concat(variables('VNetID'), '/subnets/', Parameters('newsubnetName'))]",

    "vmNicName": "[concat(parameters('existingVnetName'),Parameters('newsubnetName'))]",

    "diagnosticsExtensionName": "Microsoft.Insights.VMDiagnosticsSettings"

  },
  "resources": [

    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "createSubnetExistingVNet",
      "resourceGroup": "[parameters('vnetResourceGroup')]",
      "subscriptionId": "[parameters('vnetSubscriptionID')]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2018-04-01",
              "name": "[concat(parameters('existingVnetName'), '/', parameters('newSubnetName'))]",
              "location": "[parameters('resourceLocation')]",
              "properties": {
                "addressPrefix": "[parameters('subnet1Prefix')]"
              }
            }
          ]
        }
      }
    },


    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "createNIC",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/','createSubnetExistingVnet')]"
      ],
      "resourceGroup": "[parameters('nicResourceGroup')]",
      "subscriptionId": "[parameters('nicSubscriptionID')]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2020-04-01",
              "name": "[parameters('vmNicName')]",
              "location": "[parameters('resourceLocation')]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[resourceId(parameters('vnetResourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', parameters('existingVnetName'), parameters('newSubnetName'))]"
                      }
                    }
                  }
                ]
              }
            }
          ]
        }
      }
    },

    /*{
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-06-01",
      "name": "createStorageAccount",
      "resourceGroup": "[parameters('storageAccountResourceGroup')]",
      "subscriptionId": "[parameters('storageAccountSubscriptionID')]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2019-06-01",
              "name": "[parameters('storageAccountName')]",
              "location": "[parameters('resourcelocation')]",
              "sku": {
                "name": "[parameters('storageAccountType')]"
              },
              "kind": "StorageV2",
              "properties": {}
            }
          ],
          "outputs": {
            "storageEndpoint": {
              "type": "string",
              "value": "[reference(parameters('storageAccountName'), '2019-06-01').primaryEndpoints.blob]"
            },
            "storageKey": {
              "type": "string",
              "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value]"
            },

            "storageAccountResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts',parameters('storageAccountName'))]" // will this not work?
            }
            

          }
        }
      }
    },
  */

    //
    //    Inline Template to Create Storage Account in another resource group
    //        Outputs the storage account URL, Key1, ID
    //
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "createStorageAccount",
      "resourceGroup": "[parameters('storageAccountResourceGroup')]",
      "subscriptionId": "[parameters('storageAccountSubscriptionID')]",
      "properties": {
        "mode": "Incremental",
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "parameters": {
          "storageAccountName": {
            "value": "[parameters('storageAccountName')]",
          },
          "resourcelocation": {
            "value": "[parameters('resourcelocation')]",
          },
          "storageAccountType": {
            "value": "Standard_LRS"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "storageAccountName": {
              "type": "string"
            },
            "resourcelocation": {
              "type": "string"
            },
            "storageAccountType": {
              "type": "string"
            }
          },
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2019-06-01",
              "name": "[parameters('storageAccountName')]",
              "location": "[parameters('resourcelocation')]",
              "sku": {
                "name": "[parameters('storageAccountType')]"
              },
              "kind": "StorageV2",
              "properties": {}
            }
          ],
          "outputs": {
            "storageEndpoint": {
              "type": "string",
              "value": "[reference(parameters('storageAccountName'), '2016-01-01').primaryEndpoints.blob]"
            },
            "storageKey": {
              "type": "string",
              "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value]"
            },
            "storageAccountResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts',parameters('storageAccountName'))]"
            }
          }
        }
      }
    },



  {
    "type": "Microsoft.Resources/deployments",
    "apiVersion": "2019-10-01",
    "name": "createVirtualMachine",
    "dependsOn": [

      "[concat('Microsoft.Resources/deployments/','createNIC')]",
      "[concat('Microsoft.Resources/deployments/','createStorageAccount')]"
    ],

    "resourceGroup": "[parameters('vmResourceGroup')]",
    "subscriptionId": "[parameters('vmSubscriptionID')]",
    "properties": {
      "mode": "Incremental",
      "template": {
        "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
        "contentVersion": "1.0.0.0",
        "parameters": {},
        "variables": {},
        "resources": [
          {
            "name": "[parameters('virtualMachineName')]",
            "type": "Microsoft.Compute/virtualMachines",
            "location": "[resourceGroup().location]",
            "apiVersion": "2018-06-01",

            "properties": {
              "hardwareProfile": {
                "vmSize": "[parameters('vmsize')]"
              },
              "osProfile": {
                "computerName": "[parameters('virtualMachineName')]",
                "adminUsername": "[parameters('localAdminUsername')]",
                "adminPassword": "[parameters('localAdminPassword')]"
              },
              "storageProfile": {
                "imageReference": {
                  "publisher": "MicrosoftWindowsServer",
                  "offer": "WindowsServer",
                  "sku": "[parameters('virtualMachineSKU')]",
                  "version": "latest"
                },
                "osDisk": {
                  "name": "[concat(parameters('virtualMachineName'),'-osDisk')]",
                  "managedDisk": {
                    "storageAccountType": "Premium_LRS"
                  },
                  "createOption": "FromImage"
                },
                "dataDisks": [
                  {
                    "lun": 0,
                    "diskSizeGB": "[parameters('dataDiskSize')]",
                    "name": "[concat(parameters('virtualMachineName'),'-dataDisk-01')]",
                    "caching": "None",
                    "managedDisk": {
                      "storageAccountType": "Premium_LRS"
                    },
                    "createOption": "Empty"
                  }
                ]
              },
              "networkProfile": {
                "networkInterfaces": [
                  {
                    "id": "[resourceId(parameters('nicSubscriptionId'), parameters('nicResourceGroup'), 'Microsoft.Network/networkInterfaces', parameters('vmNicName'))]"
                  }
                ]
              },
              "diagnosticsProfile": {
                "bootDiagnostics": {
                  "enabled": true,
                  "storageUri": "[concat('https://',parameters('storageAccountName'),'.blob.core.windows.net/')]"
                }
              }
            }
          }

        ]
      }
    }
  },

  {
    "type": "Microsoft.Resources/deployments",
    "apiVersion": "2019-10-01",
    "name": "vmDiagnostics",
    "dependsOn": [
      //"[resourceId(parameters('vmSubscriptionId'), parameters('vmResourceGroup'), 'Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
      // "[concat('Microsoft.Compute/virtualMachines/',parameters('virtualMachineName'))]"
      //"[concat('Microsoft.Compute/virtualMachines/', parameters('virtualMachineName'))]"
      //"[concat('Microsoft.Resources/deployments/','createVirtualMachine')]",
      //"[concat('Microsoft.Resources/deployments/','createStorageAccount')]"
      "createStorageAccount", // how it is ref'd in ms docs.
      "createVirtualMachine"
      // "[parameters('virtualMachineName')]"
    ],
    "resourceGroup": "[parameters('vmResourceGroup')]",
    "subscriptionId": "[parameters('vmSubscriptionID')]",
    "properties": {
      "mode": "Incremental",
      "template": {
        "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
        "contentVersion": "1.0.0.0",
        "parameters": {},
        "variables": {},
        "resources": [

          {
            "name": "[concat(parameters('virtualMachineName'), '/Diagnostics')]",

            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "2017-12-01",
            "location": "[parameters('resourcelocation')]",
            "properties": {
              "publisher": "Microsoft.Azure.Diagnostics",
              "type": "IaaSDiagnostics",
              "typeHandlerVersion": "1.5",
              "autoUpgradeMinorVersion": true,
              "settings": {
                "StorageAccount": "[parameters('storageAccountName')]",


                //"[reference('createStorageAccount').outputs.storageAccountResourceId.value]",

                //"[resourceId(parameters('storageAccountSubscriptionId'), parameters('storageAccountResourceGroup'), 'Microsof.Storage/storageAccounts', parameters('storageAccountName'))]", // wrong here? but nic is like this

                "WadCfg": {
                  "DiagnosticMonitorConfiguration": {
                    "overallQuotaInMB": 5120,
                    "Metrics": {
                      "resourceId": "[resourceId(parameters('vmSubscriptionId'), parameters('vmResourceGroup'), 'Microsof.Compute/virtualMachines', parameters('virtualMachineName'))]", // wrong here? pulling resourceId not ref

                      "MetricAggregation": [
                        {
                          "scheduledTransferPeriod": "PT1H"
                        },
                        {
                          "scheduledTransferPeriod": "PT1M"
                        }
                      ]
                    },
                    "DiagnosticInfrastructureLogs": {
                      "scheduledTransferLogLevelFilter": "Error"
                    },
                    "PerformanceCounters": {
                      "scheduledTransferPeriod": "PT1M",
                      "PerformanceCounterConfiguration": [
                        {
                          "counterSpecifier": "\\Processor Information(_Total)\\% Processor Time",
                          "unit": "Percent",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\Processor Information(_Total)\\% Privileged Time",
                          "unit": "Percent",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\Processor Information(_Total)\\% User Time",
                          "unit": "Percent",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\Processor Information(_Total)\\Processor Frequency",
                          "unit": "Count",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\System\\Processes",
                          "unit": "Count",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\Process(_Total)\\Thread Count",
                          "unit": "Count",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\Process(_Total)\\Handle Count",
                          "unit": "Count",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\System\\System Up Time",
                          "unit": "Count",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\System\\Context Switches/sec",
                          "unit": "CountPerSecond",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\System\\Processor Queue Length",
                          "unit": "Count",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\Memory\\% Committed Bytes In Use",
                          "unit": "Percent",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\Memory\\Available Bytes",
                          "unit": "Bytes",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\Memory\\Committed Bytes",
                          "unit": "Bytes",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\Memory\\Cache Bytes",
                          "unit": "Bytes",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\Memory\\Pool Paged Bytes",
                          "unit": "Bytes",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\Memory\\Pool Nonpaged Bytes",
                          "unit": "Bytes",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\Memory\\Pages/sec",
                          "unit": "CountPerSecond",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\Memory\\Page Faults/sec",
                          "unit": "CountPerSecond",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\Process(_Total)\\Working Set",
                          "unit": "Count",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\Process(_Total)\\Working Set - Private",
                          "unit": "Count",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\LogicalDisk(_Total)\\% Disk Time",
                          "unit": "Percent",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\LogicalDisk(_Total)\\% Disk Read Time",
                          "unit": "Percent",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\LogicalDisk(_Total)\\% Disk Write Time",
                          "unit": "Percent",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\LogicalDisk(_Total)\\% Idle Time",
                          "unit": "Percent",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\LogicalDisk(_Total)\\Disk Bytes/sec",
                          "unit": "BytesPerSecond",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\LogicalDisk(_Total)\\Disk Read Bytes/sec",
                          "unit": "BytesPerSecond",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\LogicalDisk(_Total)\\Disk Write Bytes/sec",
                          "unit": "BytesPerSecond",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\LogicalDisk(_Total)\\Disk Transfers/sec",
                          "unit": "BytesPerSecond",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\LogicalDisk(_Total)\\Disk Reads/sec",
                          "unit": "BytesPerSecond",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\LogicalDisk(_Total)\\Disk Writes/sec",
                          "unit": "BytesPerSecond",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\LogicalDisk(_Total)\\Avg. Disk sec/Transfer",
                          "unit": "Count",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\LogicalDisk(_Total)\\Avg. Disk sec/Read",
                          "unit": "Count",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\LogicalDisk(_Total)\\Avg. Disk sec/Write",
                          "unit": "Count",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\LogicalDisk(_Total)\\Avg. Disk Queue Length",
                          "unit": "Count",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\LogicalDisk(_Total)\\Avg. Disk Read Queue Length",
                          "unit": "Count",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\LogicalDisk(_Total)\\Avg. Disk Write Queue Length",
                          "unit": "Count",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\LogicalDisk(_Total)\\% Free Space",
                          "unit": "Percent",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\LogicalDisk(_Total)\\Free Megabytes",
                          "unit": "Count",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\Network Interface(*)\\Bytes Total/sec",
                          "unit": "BytesPerSecond",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\Network Interface(*)\\Bytes Sent/sec",
                          "unit": "BytesPerSecond",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\Network Interface(*)\\Bytes Received/sec",
                          "unit": "BytesPerSecond",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\Network Interface(*)\\Packets/sec",
                          "unit": "BytesPerSecond",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\Network Interface(*)\\Packets Sent/sec",
                          "unit": "BytesPerSecond",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\Network Interface(*)\\Packets Received/sec",
                          "unit": "BytesPerSecond",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\Network Interface(*)\\Packets Outbound Errors",
                          "unit": "Count",
                          "sampleRate": "PT60S"
                        },
                        {
                          "counterSpecifier": "\\Network Interface(*)\\Packets Received Errors",
                          "unit": "Count",
                          "sampleRate": "PT60S"
                        }
                      ]
                    },
                    "WindowsEventLog": {
                      "scheduledTransferPeriod": "PT1M",
                      "DataSource": [
                        {
                          "name": "Application!*[System[(Level = 1 or Level = 2 or Level = 3)]]"
                        },
                        {
                          "name": "Security!*[System[band(Keywords,4503599627370496)]]"
                        },
                        {
                          "name": "System!*[System[(Level = 1 or Level = 2 or Level = 3)]]"
                        }
                      ]
                    }
                  }
                }
              },
              "protectedSettings": {
                "storageAccountName": "[parameters('storageAccountName')]",

                //"[resourceId(parameters('storageAccountSubscriptionId'), parameters('storageAccountResourceGroup'), 'Microsof.Storage/storageAccounts', parameters('storageAccountName'))]",

                // "storageAccountKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value]",

                "storageAccountKey": "[reference('createStorageAccount').outputs.storageKey.value]",

                //"[reference(concat(parameters('storageAccountName'),'createStorageAccount')).outputs.storageKey.value]",

                // "id": "[reference('createStorageAccount').outputs.storageKey.value]",

                "storageAccountEndPoint": "https://core.windows.net/"
              }
            }
          }










        ]
      }
    }
  },

  {
    "type": "Microsoft.Resources/deployments",
    "apiVersion": "2019-10-01",
    "name": "createSQL",
    //"dependsOn": [

    //  //"[concat('Microsoft.Resources/deployments/','createSubnetExistingVnet')]"

    //  //"createSubnetExistingVnet"
    //],
    "resourceGroup": "[parameters('sqlResourceGroup')]",
    "subscriptionId": "[parameters('sqlSubscriptionId')]",
    "properties": {
      "mode": "Incremental",
      "template": {
        "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
        "contentVersion": "1.0.0.0",
        "parameters": {},
        "variables": {},
        "resources": [

          {
            "type": "Microsoft.Sql/servers",
            "name": "[parameters('sqlName')]",
            "location": "westeurope",
            "apiVersion": "2019-06-01-preview",
            "properties": {
              "administratorLogin": "[parameters('localAdminUsername')]",
              "administratorLoginPassword": "[parameters('localAdminPassword')]"
            }

          }


        ]
      }

    }
  },











































































  ],

  "outputs": {}

}
